using System;
using System.ComponentModel; using Xamarin.Forms; using System.Windows.Input; using System.Globalization; using System.Collections.Generic; using System.Text.RegularExpressions;
namespace StemmonsMobile
{
     public class HtmlLabelConverter : IValueConverter         {             public object Convert(object value, Type targetType, object parameter, CultureInfo culture)             {                 var formatted = new FormattedString();                  foreach (var item in ProcessString((string)value))                     formatted.Spans.Add(CreateSpan(item));                  return formatted;             }              private Span CreateSpan(StringSection section)             {                 var label = new Span()                 {                     Text = section.Text                 };                  if (!string.IsNullOrEmpty(section.Link))                 {                     label.GestureRecognizers.Add(new TapGestureRecognizer()                     {                         Command = _navigationCommand,                         CommandParameter = section.Link                     });                     label.TextColor = Color.Blue;                 // Underline coming soon from https://github.com/xamarin/Xamarin.Forms/pull/2221                 // Currently available in Nightly builds if you wanted to try, it does work :)                 // As of 2018-07-22. But not avail in 3.2.0-pre1.                 //label.TextDecorations = TextDecorations.Underline;                 }                  return label;             }              public IList<StringSection> ProcessString(string rawText)             {
            rawText = rawText.Replace("\astart", "<a").Replace("\aEnd", "</a>");

            const string spanPattern = @"(<a.*?>.*?</a>)";                  MatchCollection collection = Regex.Matches(rawText, spanPattern, RegexOptions.Singleline);                  var sections = new List<StringSection>();                  var lastIndex = 0;                  foreach (Match item in collection)                 {                     var foundText = item.Value;                     sections.Add(new StringSection() { Text = rawText.Substring(lastIndex, item.Index - lastIndex) });                     lastIndex = item.Index + item.Length;                      // Get HTML href                      var html = new StringSection()                     {                         Link = Regex.Match(item.Value, "(?<=href=\\\")[\\S]+(?=\\\")").Value,                         Text = Regex.Replace(item.Value, "<.*?>", string.Empty)                     };                      sections.Add(html);                 }                  sections.Add(new StringSection() { Text = rawText.Substring(lastIndex) });                  return sections;             }              public class StringSection             {                 public string Text { get; set; }                 public string Link { get; set; }             }              private ICommand _navigationCommand = new Command<string>((url) =>             {                 Device.OpenUri(new Uri(url));             });              public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)             {                 throw new NotImplementedException();             }         } 
}
