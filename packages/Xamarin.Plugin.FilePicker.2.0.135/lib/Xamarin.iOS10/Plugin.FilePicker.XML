<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Plugin.FilePicker</name>
    </assembly>
    <members>
        <member name="T:Plugin.FilePicker.CrossFilePicker">
            <summary>
            Cross-platform FilePicker implementation
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.CrossFilePicker.implementation">
            <summary>
            Lazy-initialized file picker implementation
            </summary>
        </member>
        <member name="P:Plugin.FilePicker.CrossFilePicker.Current">
            <summary>
            Current file picker instance
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.CrossFilePicker.CreateFilePicker">
            <summary>
            Creates file picker instance for the platform
            </summary>
            <returns>file picker instance</returns>
        </member>
        <member name="M:Plugin.FilePicker.CrossFilePicker.NotImplementedInReferenceAssembly">
            <summary>
            Returns new exception to throw when implementation is not found. This is the case when
            the NuGet package is not added to the platform specific project.
            </summary>
            <returns>exception to throw</returns>
        </member>
        <member name="T:Plugin.FilePicker.FilePickerImplementation">
            <summary>
            Implementation for file picking on iOS
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.FilePickerImplementation.requestId">
            <summary>
            Request ID for current picking call
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.FilePickerImplementation.completionSource">
            <summary>
            Task completion source for task when finished picking
            </summary>
        </member>
        <member name="P:Plugin.FilePicker.FilePickerImplementation.Handler">
            <summary>
            Event which is invoked when a file was picked
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.OnFilePicked(Plugin.FilePicker.Abstractions.FilePickerEventArgs)">
            <summary>
            Called when file has been picked successfully
            </summary>
            <param name="args">file picker event args</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.DocumentPicker_DidPickDocumentAtUrls(System.Object,UIKit.UIDocumentPickedAtUrlsEventArgs)">
            <summary>
            Callback method called by document picker when file has been picked; this is called
            starting from iOS 11.
            </summary>
            <param name="sender">sender object (document picker)</param>
            <param name="args">event args</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.DocumentPicker_DidPickDocument(System.Object,UIKit.UIDocumentPickedEventArgs)">
            <summary>
            Callback method called by document picker when file has been picked; this is called
            up to iOS 10.
            </summary>
            <param name="sender">sender object (document picker)</param>
            <param name="args">event args</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.DocumentPicker_WasCancelled(System.Object,System.EventArgs)">
            <summary>
            Handles when the file picker was cancelled. Either in the
            popup menu or later on.
            </summary>
            <param name="sender">sender object (document picker)</param>
            <param name="args">event args</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.PickFile(System.String[])">
            <summary>
            Lets the user pick a file with the systems default file picker.
            For iOS iCloud drive needs to be configured.
            </summary>
            <param name="allowedTypes">
            Specifies one or multiple allowed types. When null, all file types
            can be selected while picking.
            On iOS you can specify UTType constants, e.g. UTType.Image.
            </param>
            <returns>
            File data object, or null when user cancelled picking file
            </returns>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.PickMediaAsync(System.String[])">
            <summary>
            File picking implementation
            </summary>
            <param name="allowedTypes">list of allowed types; may be null</param>
            <returns>picked file data, or null when picking was cancelled</returns>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.GetActiveViewController">
            <summary>
            Finds active view controller to use to present document picker
            </summary>
            <returns>view controller to use</returns>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.GetRequestId">
            <summary>
            Returns a new request ID for a new call to PickFile()
            </summary>
            <returns>new request ID</returns>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.SaveFile(Plugin.FilePicker.Abstractions.FileData)">
            <summary>
            iOS implementation of saving a picked file to the iOS "my documents" directory.
            </summary>
            <param name="fileToSave">picked file data for file to save</param>
            <returns>true when file was saved successfully, false when not</returns>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.OpenFile(Foundation.NSUrl)">
            <summary>
            iOS implementation of opening a file by using a UIDocumentInteractionController.
            </summary>
            <param name="fileUrl">file Url to open in viewer</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.OpenFile(System.String)">
            <summary>
            iOS implementation of OpenFile(), opening a file already stored on iOS "my documents"
            directory.
            </summary>
            <param name="fileToOpen">relative filename of file to open</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.OpenFile(Plugin.FilePicker.Abstractions.FileData)">
            <summary>
            iOS implementation of OpenFile(), opening a picked file in an external viewer. The
            picked file is saved to iOS "my documents" directory before opening.
            </summary>
            <param name="fileToOpen">picked file data</param>
        </member>
    </members>
</doc>
